{*

Generate all color tokens as named variables.
Tokens are named by their group path and then name, 
and their value rendered using `rendered-color` blueprint

*}
:root {
  --color-border-blue-100: theme(colors.blue.700);
  --color-border-blue-200: theme(colors.blue.800);
  --color-border-blue-300: theme(colors.blue.900);
  --bgColor-body: var(--color-base-white);
  --fgColor-heading: var(--color-base-black);
  --fgColor-gray-50: var(--color-gray-50);
  --fgColor-gray-100: var(--color-gray-100);
  --fgColor-gray-200: var(--color-gray-200);
  --fgColor-gray-300: var(--color-gray-300);
  --fgColor-gray-400: var(--color-gray-400);
  --fgColor-gray-500: var(--color-gray-500);
  --fgColor-gray-600: var(--color-gray-600);
  --fgColor-gray-700: var(--color-gray-700);
  --fgColor-gray-800: var(--color-gray-800);
  --fgColor-gray-900: var(--color-gray-900);
  --fgColor-gray-950: var(--color-gray-950);

{[ let brand = ds.currentBrand() /]}
{[ for token in ds.tokensByType("Color", brand.id) ]}
{[ let newtoken = addTokenType(token) /]}
{[ let tokenGroup = ds.tokenGroupContainingTokenId(token.id) /]}
{[ let tokenName = readableVariableName(token, tokenGroup, '') /]}
{[ if (!tokenName.startsWith('black') && !tokenName.startsWith('white') && !tokenName.startsWith('blue') && !tokenName.startsWith('gray') && !tokenName.startsWith('green') && !tokenName.startsWith('red') && !tokenName.startsWith('base') && !tokenName.startsWith('neutral') && !tokenName.startsWith('webstack')) ]}
  {[ inject "rendered-token-var" context newtoken /]}


{[/]}
{[/]}
}
.dark {
  --color-border-blue-100: theme(colors.blue.700);
  --color-border-blue-200: theme(colors.blue.800);
  --color-border-blue-300: theme(colors.blue.900);
  --bgColor-body: var(--color-gray-900);
  --fgColor-heading: var(--color-base-white);
  --fgColor-gray-50: var(--color-gray-950);
  --fgColor-gray-100: var(--color-gray-900);
  --fgColor-gray-200: var(--color-gray-800);
  --fgColor-gray-300: var(--color-gray-700);
  --fgColor-gray-400: var(--color-gray-600);
  --fgColor-gray-500: var(--color-gray-500);
  --fgColor-gray-600: var(--color-gray-400);
  --fgColor-gray-700: var(--color-gray-300);
  --fgColor-gray-800: var(--color-gray-200);
  --fgColor-gray-900: var(--color-gray-100);
  --fgColor-gray-950: var(--color-gray-50);

{[ let themes = ds.allThemes(brand.id) /]}
{[ let darkThemeId = getDarkThemeId(themes) /]}
{[ if darkThemeId ]}
{[ for token in ds.tokensByType("Color", brand.id) ]}
{[ let darkToken = ds.tokensByApplyingThemes([token.id], [darkThemeId]) /]}
{[ let newtoken = addTokenType(darkToken[0]) /]}
{[ let tokenGroup = ds.tokenGroupContainingTokenId(token.id) /]}
{[ let tokenName = readableVariableName(token, tokenGroup, '') /]}
{[ if (!tokenName.startsWith('black') && !tokenName.startsWith('white') && !tokenName.startsWith('blue') && !tokenName.startsWith('gray') && !tokenName.startsWith('green') && !tokenName.startsWith('red') && !tokenName.startsWith('base') && !tokenName.startsWith('neutral') && !tokenName.startsWith('webstack')) ]}
  {[ inject "rendered-token-var" context newtoken /]}


{[/]}
{[/]}
{[/]}
}
{*

Generate all color tokens as named variables.
Tokens are named by their group path and then name, 
and their value rendered using `rendered-color` blueprint

*}
:root {
  --color-border-blue-100: theme(colors.blue.700);
  --color-border-blue-200: theme(colors.blue.800);
  --color-border-blue-300: theme(colors.blue.900);

{[ let brand = ds.currentBrand() /]}
{[ for token in ds.tokensByType("Color", brand.id) ]}
{[ let newtoken = addTokenType(token) /]}
{[ let tokenGroup = ds.tokenGroupContainingTokenId(token.id) /]}
{[ let tokenName = readableVariableName(token, tokenGroup, '') /]}
{[ if (!tokenName.startsWith('black') && !tokenName.startsWith('white') && !tokenName.startsWith('blue') && !tokenName.startsWith('gray') && !tokenName.startsWith('green') && !tokenName.startsWith('red') && !tokenName.startsWith('base') && !tokenName.startsWith('neutral') && !tokenName.startsWith('webstack')) ]}
  {[ inject "rendered-token-var" context newtoken /]}


{[/]}
{[/]}
}
.dark {
  --color-border-blue-100: theme(colors.blue.700);
  --color-border-blue-200: theme(colors.blue.800);
  --color-border-blue-300: theme(colors.blue.900);

{[ let themes = ds.allThemes(brand.id) /]}
{[ let darkThemeId = getDarkThemeId(themes) /]}
{[ if darkThemeId ]}
{[ for token in ds.tokensByType("Color", brand.id) ]}
{[ let darkToken = ds.tokensByApplyingThemes([token.id], [darkThemeId]) /]}
{[ let newtoken = addTokenType(darkToken[0]) /]}
{[ let tokenGroup = ds.tokenGroupContainingTokenId(token.id) /]}
{[ let tokenName = readableVariableName(token, tokenGroup, '') /]}
{[ if (!tokenName.startsWith('black') && !tokenName.startsWith('white') && !tokenName.startsWith('blue') && !tokenName.startsWith('gray') && !tokenName.startsWith('green') && !tokenName.startsWith('red') && !tokenName.startsWith('base') && !tokenName.startsWith('neutral') && !tokenName.startsWith('webstack')) ]}
  {[ inject "rendered-token-var" context newtoken /]}


{[/]}
{[/]}
{[/]}
}